#include <iostream>
#include <vector>
#include <queue>
#include <fstream>

using namespace std;

vector<vector<int>>g;
int a;
int b;
int r;

void bfs() 
{
    queue<int>q;
    q.push(b);
    vector<bool>used(a);
    vector<int>d(a), p(a, -1);
    used[s] = true;

    while (!q.empty()) 
    {
        int V = q.front();
        q.pop();
        for (int i = 0; i < a; ++i) 
        {
            if (g[V][i] && !used[i]) 
            {
                used[i] = true;
                q.push(i);
                d[i] = d[V] + 1;
                p[i] = V;
            }   
        }
    }
    if (!used[r]) 
    {
        cout << "NO path!";
    }
    else 
    {
        vector<int> path;
        for (int V = r; V != -1; V = p[V]) 
        {
            path.push_back(V);
        }
    }

    reverse(path.begin(), path.end());
    cout << "Path: ";
    for (size_t i = 0; i < path.size(); ++i) 
    {
        cout << path[i] + 1 << " ";
    }

}

int main()
{
    vector <int> v;
    ifstream fin("test.txt", ifstream::in);
    if (fin)
    {
        fin >> a;
        int a;

        for (int j = 0; j < a; j++)
        {
            for (int i = 0; i < a; i++)
            {
                fin >> a;
                v.push_back(a);
            }
            g.push_back(v);
            v.clear();
        }
        fin >> b;
        fin >> r;
        b--;
        r--;
    }
bfs();
}
